Grammar
Group Member: Lucas Menezes, Mattyws Grawe; Vitor Finati

Program -> FunctionDecl* MainFunc
FunctionDecl -> Type id (Parameters) { Stm* }
Parameters -> Type id ParametersList*
	-> ø
ParametersList -> , Type id
	-> ø
MainFunc -> main() { Stm* }
Stm -> { Stm* }
	-> VarDecl
	-> IdStm
	-> WhileStm
	-> IfStm
VarDecl -> Type id DeclAssign VarDeclList*;
VarDeclList -> ,id DeclAssign
	-> ø
DeclAssign -> = Exp
	-> ø
Type -> int
	-> boolean
	-> float
	-> char
	-> string
	-> void
	-> int [ ] 
 	-> boolean [ ] 
 	-> float [ ] 
 	-> char [ ] 
 	-> string [ ]
IdStm -> id IdDef 
IdDef -> = Exp ; 
	-> ( ExpParam ) ;  
ExpParam -> Exp ExpParamList*
	-> ø
ExpParamList -> , Exp
	-> ø
Exp -> CompareExp Clist
Clist -> & CompareExp Clist
	-> | CompareExp Clist
	-> ø
CompareExp -> PlusMinusExp Plist
Plist -> < PlusMinusExp Plist
	-> > PlusMinusExp Plist
	-> == PlusMinusExp Plist
	-> <= PlusMinusExp Plist
	-> >= PlusMinusExp Plist
	-> ø
PlusMinusExp -> DivisionExp Dlist
Dlist -> + DivisionExp Dlist
	-> - DivisionExp Dlist
	-> ø
DivisionExp -> MultExp Mlist
Mlist -> / MultExp Mlist
	-> % MultExp Mlist
	-> ø
MultExp -> NotExp Nlist
Nlist -> * NotExp Nlist
	-> ø
NotExp -> ! Exp
	-> Factor
Factor -> number 
 	-> true 
 	-> false 
 	-> id
 	-> id ( ExpParam )
 	-> id [ Exp ]
 	-> stringValue 
 	-> charValue
WhileStm -> while (Exp) Stm
IfStm -> if (Exp) Stm ElseStm
ElseStm -> else Stm
	-> ø